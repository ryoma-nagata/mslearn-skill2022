{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## ワークスペースと実験設定"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import azure.ai.ml \r\n",
        "from azure.ai.ml import MLClient\r\n",
        "from azure.identity import DefaultAzureCredential, InteractiveBrowserCredential\r\n",
        "from azureml.core import Workspace\r\n",
        "\r\n",
        "ws = Workspace.from_config()\r\n",
        "print('Workspace name: ' + ws.name, \r\n",
        "      'Azure region: ' + ws.location, \r\n",
        "      'Subscription id: ' + ws.subscription_id, \r\n",
        "      'Resource group: ' + ws.resource_group, sep='\\n')\r\n",
        "\r\n",
        "\r\n",
        "try:\r\n",
        "    credential = DefaultAzureCredential()\r\n",
        "    # Check if given credential can get token successfully.\r\n",
        "    credential.get_token(\"https://management.azure.com/.default\")\r\n",
        "except Exception as ex:\r\n",
        "    # Fall back to InteractiveBrowserCredential in case DefaultAzureCredential not work\r\n",
        "    # This will open a browser page for\r\n",
        "    credential = InteractiveBrowserCredential()\r\n",
        "\r\n",
        "try:\r\n",
        "    ml_client = MLClient.from_config(credential=credential)\r\n",
        "except Exception as ex:\r\n",
        "    # NOTE: Update following workspace information if not correctly configure before\r\n",
        "    client_config = {\r\n",
        "        \"subscription_id\": ws.subscription_id,\r\n",
        "        \"resource_group\": ws.resource_group,\r\n",
        "        \"workspace_name\": ws.name,\r\n",
        "    }\r\n",
        "\r\n",
        "    if client_config[\"subscription_id\"].startswith(\"<\"):\r\n",
        "        print(\r\n",
        "            \"please update your <SUBSCRIPTION_ID> <RESOURCE_GROUP> <AML_WORKSPACE_NAME> in notebook cell\"\r\n",
        "        )\r\n",
        "        raise ex\r\n",
        "    else:  # write and reload from config file\r\n",
        "        import json, os\r\n",
        "\r\n",
        "        config_path = \"../.azureml/config.json\"\r\n",
        "        os.makedirs(os.path.dirname(config_path), exist_ok=True)\r\n",
        "        with open(config_path, \"w\") as fo:\r\n",
        "            fo.write(json.dumps(client_config))\r\n",
        "        ml_client = MLClient.from_config(credential=credential, path=config_path)\r\n",
        "print(ml_client)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "Found the config file in: /mnt/batch/tasks/shared/LS_root/mounts/clusters/skilling-ml2/code/Users/localdev/github/mslearn-skill2022/.azureml/config.json\n"
        }
      ],
      "execution_count": 1,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655974692903
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import mlflow\r\n",
        "\r\n",
        "tracking_uri = ml_client.workspaces.get(name=ws.name).mlflow_tracking_uri\r\n",
        "mlflow.set_tracking_uri(tracking_uri)\r\n",
        "experiment_name = \"skill-train-evaluate-regression-models\" \r\n",
        "mlflow.set_experiment(experiment_name)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 09:16:17 INFO mlflow.tracking.fluent: Experiment with name 'skill-train-evaluate-regression-models' does not exist. Creating a new experiment.\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 14,
          "data": {
            "text/plain": "<Experiment: artifact_location='', experiment_id='65681a56-c343-4d34-8f3f-f985deeb62f8', lifecycle_stage='active', name='skill-train-evaluate-regression-models', tags={}>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 14,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655975777950
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## LinearRegression"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Data Prep"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\r\n",
        "file_path = './data/daily-bike-share.csv'\r\n",
        "bike_data = pd.read_csv(file_path)\r\n",
        "bike_data.head()\r\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "   instant    dteday  season  yr  mnth  holiday  weekday  workingday  \\\n0        1  1/1/2011       1   0     1        0        6           0   \n1        2  1/2/2011       1   0     1        0        0           0   \n2        3  1/3/2011       1   0     1        0        1           1   \n3        4  1/4/2011       1   0     1        0        2           1   \n4        5  1/5/2011       1   0     1        0        3           1   \n\n   weathersit      temp     atemp       hum  windspeed  rentals  \n0           2  0.344167  0.363625  0.805833   0.160446      331  \n1           2  0.363478  0.353739  0.696087   0.248539      131  \n2           1  0.196364  0.189405  0.437273   0.248309      120  \n3           1  0.200000  0.212122  0.590435   0.160296      108  \n4           1  0.226957  0.229270  0.436957   0.186900       82  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>instant</th>\n      <th>dteday</th>\n      <th>season</th>\n      <th>yr</th>\n      <th>mnth</th>\n      <th>holiday</th>\n      <th>weekday</th>\n      <th>workingday</th>\n      <th>weathersit</th>\n      <th>temp</th>\n      <th>atemp</th>\n      <th>hum</th>\n      <th>windspeed</th>\n      <th>rentals</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1/1/2011</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.344167</td>\n      <td>0.363625</td>\n      <td>0.805833</td>\n      <td>0.160446</td>\n      <td>331</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1/2/2011</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0.363478</td>\n      <td>0.353739</td>\n      <td>0.696087</td>\n      <td>0.248539</td>\n      <td>131</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1/3/2011</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.196364</td>\n      <td>0.189405</td>\n      <td>0.437273</td>\n      <td>0.248309</td>\n      <td>120</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1/4/2011</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.200000</td>\n      <td>0.212122</td>\n      <td>0.590435</td>\n      <td>0.160296</td>\n      <td>108</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>1/5/2011</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.226957</td>\n      <td>0.229270</td>\n      <td>0.436957</td>\n      <td>0.186900</td>\n      <td>82</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655974969978
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Separate features and labels\r\n",
        "X, y = bike_data[['season','mnth', 'holiday','weekday','workingday','weathersit','temp', 'atemp', 'hum', 'windspeed']].values, bike_data['rentals'].values\r\n",
        "print('Features:',X[:10], '\\nLabels:', y[:10], sep='\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Features:\n[[1.        1.        0.        6.        0.        2.        0.344167\n  0.363625  0.805833  0.160446 ]\n [1.        1.        0.        0.        0.        2.        0.363478\n  0.353739  0.696087  0.248539 ]\n [1.        1.        0.        1.        1.        1.        0.196364\n  0.189405  0.437273  0.248309 ]\n [1.        1.        0.        2.        1.        1.        0.2\n  0.212122  0.590435  0.160296 ]\n [1.        1.        0.        3.        1.        1.        0.226957\n  0.22927   0.436957  0.1869   ]\n [1.        1.        0.        4.        1.        1.        0.204348\n  0.233209  0.518261  0.0895652]\n [1.        1.        0.        5.        1.        2.        0.196522\n  0.208839  0.498696  0.168726 ]\n [1.        1.        0.        6.        0.        2.        0.165\n  0.162254  0.535833  0.266804 ]\n [1.        1.        0.        0.        0.        1.        0.138333\n  0.116175  0.434167  0.36195  ]\n [1.        1.        0.        1.        1.        1.        0.150833\n  0.150888  0.482917  0.223267 ]]\n\nLabels:\n[331 131 120 108  82  88 148  68  54  41]\n"
        }
      ],
      "execution_count": 5,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655974973952
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\r\n",
        "\r\n",
        "# Split data 70%-30% into training set and test set\r\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\r\n",
        "\r\n",
        "print ('Training Set: %d rows\\nTest Set: %d rows' % (X_train.shape[0], X_test.shape[0]))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Training Set: 511 rows\nTest Set: 220 rows\n"
        }
      ],
      "execution_count": 6,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655974982017
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time \r\n",
        "\r\n",
        "run_name = f'sand_sklearn_LinearRegression_run_{int(time.time())}' # 実行ごとにかぶらないようにしつつ好きな名前を指定\r\n",
        "run = mlflow.start_run(run_name=run_name)\r\n",
        "# enable auto logging\r\n",
        "mlflow.autolog()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 09:16:23 INFO mlflow.tracking.fluent: Autologging successfully enabled for sklearn.\n2022/06/23 09:16:23 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.\n2022/06/23 09:16:23 INFO mlflow.pyspark.ml: No SparkSession detected. Autologging will log pyspark.ml models contained in the default allowlist. To specify a custom allowlist, initialize a SparkSession prior to calling mlflow.pyspark.ml.autolog() and specify the path to your allowlist file via the spark.mlflow.pysparkml.autolog.logModelAllowlistFile conf.\n2022/06/23 09:16:23 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.ml.\n"
        }
      ],
      "execution_count": 15,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655975783927
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\r\n",
        "from sklearn.linear_model import LinearRegression\r\n",
        "\r\n",
        "# Fit a linear regression model on the training set\r\n",
        "model = LinearRegression().fit(X_train, y_train)\r\n",
        "print (model)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 09:16:28 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during sklearn autologging: ('cannot represent an object', OrderedDict([('name', 'mlflow-env'), ('channels', ['conda-forge']), ('dependencies', ['python=3.8.5', 'pip<=20.1.1', {'pip': ['mlflow', 'cloudpickle==1.6.0', 'lz4==4.0.1', 'psutil==5.9.0', 'scikit-learn==0.22.1', 'uuid==1.30']}])]))\n"
        }
      ],
      "execution_count": 16,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655975789992
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Evaluate"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\r\n",
        "\r\n",
        "predictions = model.predict(X_test)\r\n",
        "np.set_printoptions(suppress=True)\r\n",
        "print('Predicted labels: ', np.round(predictions)[:10])\r\n",
        "print('Actual labels   : ' ,y_test[:10])"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Predicted labels:  [1896. 1184. 1007.  -28.  314.  385.  475.  590. 1476.  -22.]\nActual labels   :  [2418  754  222   47  244  145  240  555 3252   38]\n"
        }
      ],
      "execution_count": 17,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655975791971
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "fig = plt.figure(figsize=(10,10))\r\n",
        "plt.scatter(y_test, predictions)\r\n",
        "plt.xlabel('Actual Labels')\r\n",
        "plt.ylabel('Predicted Labels')\r\n",
        "plt.title('Daily Bike Share Predictions')\r\n",
        "# overlay the regression line\r\n",
        "z = np.polyfit(y_test, predictions, 1)\r\n",
        "p = np.poly1d(z)\r\n",
        "plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "\r\n",
        "mlflow.log_figure(fig,\"evaluate.png\")"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 720x720 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 18,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655975793101
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score\r\n",
        "\r\n",
        "mse = mean_squared_error(y_test, predictions)\r\n",
        "print(\"MSE:\", mse)\r\n",
        "\r\n",
        "rmse = np.sqrt(mse)\r\n",
        "print(\"RMSE:\", rmse)\r\n",
        "\r\n",
        "r2 = r2_score(y_test, predictions)\r\n",
        "print(\"R2:\", r2)\r\n",
        "\r\n",
        "metric = {\r\n",
        "    \"MSE\": mse,\r\n",
        "    \"RMSE\":rmse,\r\n",
        "    \"R2\":r2\r\n",
        "}\r\n",
        "mlflow.log_metrics(metric)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "MSE: 201972.55947035592\nRMSE: 449.4135728595165\nR2: 0.6040454736919191\n"
        }
      ],
      "execution_count": 19,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655975795905
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mlflow.end_run()"
      ],
      "outputs": [],
      "execution_count": 20,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655975924989
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Lasso"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time \r\n",
        "\r\n",
        "run_name = f'sand_sklearn_Lasso_run_{int(time.time())}' # 実行ごとにかぶらないようにしつつ好きな名前を指定\r\n",
        "run = mlflow.start_run(run_name=run_name)\r\n",
        "# enable auto logging\r\n",
        "mlflow.autolog()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 10:20:00 INFO mlflow.tracking.fluent: Autologging successfully enabled for sklearn.\n2022/06/23 10:20:00 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.\n2022/06/23 10:20:00 INFO mlflow.pyspark.ml: No SparkSession detected. Autologging will log pyspark.ml models contained in the default allowlist. To specify a custom allowlist, initialize a SparkSession prior to calling mlflow.pyspark.ml.autolog() and specify the path to your allowlist file via the spark.mlflow.pysparkml.autolog.logModelAllowlistFile conf.\n2022/06/23 10:20:00 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.ml.\n"
        }
      ],
      "execution_count": 22,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979602109
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import Lasso\r\n",
        "\r\n",
        "# Fit a lasso model on the training set\r\n",
        "model = Lasso().fit(X_train, y_train)\r\n",
        "print (model, \"\\n\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 10:20:04 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during sklearn autologging: ('cannot represent an object', OrderedDict([('name', 'mlflow-env'), ('channels', ['conda-forge']), ('dependencies', ['python=3.8.5', 'pip<=20.1.1', {'pip': ['mlflow', 'cloudpickle==1.6.0', 'lz4==4.0.1', 'psutil==5.9.0', 'scikit-learn==0.22.1', 'uuid==1.30']}])]))\n"
        }
      ],
      "execution_count": 23,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979605987
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Evaluate"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\r\n",
        "\r\n",
        "predictions = model.predict(X_test)\r\n",
        "np.set_printoptions(suppress=True)\r\n",
        "print('Predicted labels: ', np.round(predictions)[:10])\r\n",
        "print('Actual labels   : ' ,y_test[:10])"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Predicted labels:  [1887. 1182.  967.  -31.  301.  386.  494.  600. 1445.  -16.]\nActual labels   :  [2418  754  222   47  244  145  240  555 3252   38]\n"
        }
      ],
      "execution_count": 24,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979613055
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "fig = plt.figure(figsize=(10,10))\r\n",
        "plt.scatter(y_test, predictions)\r\n",
        "plt.xlabel('Actual Labels')\r\n",
        "plt.ylabel('Predicted Labels')\r\n",
        "plt.title('Daily Bike Share Predictions')\r\n",
        "# overlay the regression line\r\n",
        "z = np.polyfit(y_test, predictions, 1)\r\n",
        "p = np.poly1d(z)\r\n",
        "plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "\r\n",
        "mlflow.log_figure(fig,\"evaluate.png\")"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 720x720 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 25,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979627987
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score\r\n",
        "\r\n",
        "mse = mean_squared_error(y_test, predictions)\r\n",
        "print(\"MSE:\", mse)\r\n",
        "\r\n",
        "rmse = np.sqrt(mse)\r\n",
        "print(\"RMSE:\", rmse)\r\n",
        "\r\n",
        "r2 = r2_score(y_test, predictions)\r\n",
        "print(\"R2:\", r2)\r\n",
        "\r\n",
        "metric = {\r\n",
        "    \"MSE\": mse,\r\n",
        "    \"RMSE\":rmse,\r\n",
        "    \"R2\":r2\r\n",
        "}\r\n",
        "mlflow.log_metrics(metric)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "MSE: 201155.70593338404\nRMSE: 448.5038527519959\nR2: 0.6056468637824488\n"
        }
      ],
      "execution_count": 26,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979634917
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mlflow.end_run()"
      ],
      "outputs": [],
      "execution_count": 27,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979872947
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## DecisionTreeRegressor"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time \r\n",
        "\r\n",
        "run_name = f'sand_sklearn_DecisionTreeRegressor_run_{int(time.time())}' # 実行ごとにかぶらないようにしつつ好きな名前を指定\r\n",
        "run = mlflow.start_run(run_name=run_name)\r\n",
        "# enable auto logging\r\n",
        "mlflow.autolog()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 10:25:03 INFO mlflow.tracking.fluent: Autologging successfully enabled for sklearn.\n2022/06/23 10:25:03 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.\n2022/06/23 10:25:03 INFO mlflow.pyspark.ml: No SparkSession detected. Autologging will log pyspark.ml models contained in the default allowlist. To specify a custom allowlist, initialize a SparkSession prior to calling mlflow.pyspark.ml.autolog() and specify the path to your allowlist file via the spark.mlflow.pysparkml.autolog.logModelAllowlistFile conf.\n2022/06/23 10:25:03 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.ml.\n"
        }
      ],
      "execution_count": 28,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979904017
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\r\n",
        "from sklearn.tree import export_text\r\n",
        "\r\n",
        "# Train the model\r\n",
        "model = DecisionTreeRegressor().fit(X_train, y_train)\r\n",
        "print (model, \"\\n\")\r\n",
        "\r\n",
        "# Visualize the model tree\r\n",
        "tree = export_text(model)\r\n",
        "print(tree)\r\n",
        "mlflow.log_text(tree,\"tree.txt\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 10:25:07 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during sklearn autologging: ('cannot represent an object', OrderedDict([('name', 'mlflow-env'), ('channels', ['conda-forge']), ('dependencies', ['python=3.8.5', 'pip<=20.1.1', {'pip': ['mlflow', 'cloudpickle==1.6.0', 'lz4==4.0.1', 'psutil==5.9.0', 'scikit-learn==0.22.1', 'uuid==1.30']}])]))\n"
        }
      ],
      "execution_count": 29,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979908937
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Evaluate\r\n"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model using the test data\r\n",
        "predictions = model.predict(X_test)\r\n",
        "mse = mean_squared_error(y_test, predictions)\r\n",
        "print(\"MSE:\", mse)\r\n",
        "rmse = np.sqrt(mse)\r\n",
        "print(\"RMSE:\", rmse)\r\n",
        "r2 = r2_score(y_test, predictions)\r\n",
        "print(\"R2:\", r2)\r\n",
        "\r\n",
        "metric = {\r\n",
        "    \"MSE\": mse,\r\n",
        "    \"RMSE\":rmse,\r\n",
        "    \"R2\":r2\r\n",
        "}\r\n",
        "mlflow.log_metrics(metric)\r\n",
        "# Plot predicted vs actual\r\n",
        "plt.scatter(y_test, predictions)\r\n",
        "plt.xlabel('Actual Labels')\r\n",
        "plt.ylabel('Predicted Labels')\r\n",
        "plt.title('Daily Bike Share Predictions')\r\n",
        "# overlay the regression line\r\n",
        "z = np.polyfit(y_test, predictions, 1)\r\n",
        "p = np.poly1d(z)\r\n",
        "plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "mlflow.log_figure(fig,\"evaluate.png\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "MSE: 241830.68636363637\nRMSE: 491.76283548437897\nR2: 0.5259061175588766\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 30,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979920997
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mlflow.end_run()"
      ],
      "outputs": [],
      "execution_count": 31,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655979924977
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## RandomForestRegressor"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time \r\n",
        "\r\n",
        "run_name = f'sand_sklearn_RandomForestRegressor_run_{int(time.time())}' # 実行ごとにかぶらないようにしつつ好きな名前を指定\r\n",
        "run = mlflow.start_run(run_name=run_name)\r\n",
        "# enable auto logging\r\n",
        "mlflow.autolog()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 10:32:48 INFO mlflow.tracking.fluent: Autologging successfully enabled for sklearn.\n2022/06/23 10:32:48 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.\n2022/06/23 10:32:48 INFO mlflow.pyspark.ml: No SparkSession detected. Autologging will log pyspark.ml models contained in the default allowlist. To specify a custom allowlist, initialize a SparkSession prior to calling mlflow.pyspark.ml.autolog() and specify the path to your allowlist file via the spark.mlflow.pysparkml.autolog.logModelAllowlistFile conf.\n2022/06/23 10:32:48 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.ml.\n"
        }
      ],
      "execution_count": 37,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655980369039
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\r\n",
        "\r\n",
        "# Train the model\r\n",
        "model = RandomForestRegressor().fit(X_train, y_train)\r\n",
        "print (model, \"\\n\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 10:32:54 WARNING mlflow.utils.autologging_utils: Encountered unexpected error during sklearn autologging: ('cannot represent an object', OrderedDict([('name', 'mlflow-env'), ('channels', ['conda-forge']), ('dependencies', ['python=3.8.5', 'pip<=20.1.1', {'pip': ['mlflow', 'cloudpickle==1.6.0', 'lz4==4.0.1', 'psutil==5.9.0', 'scikit-learn==0.22.1', 'uuid==1.30']}])]))\n"
        }
      ],
      "execution_count": 38,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655980376109
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Evaluate"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model using the test data\r\n",
        "predictions = model.predict(X_test)\r\n",
        "mse = mean_squared_error(y_test, predictions)\r\n",
        "print(\"MSE:\", mse)\r\n",
        "rmse = np.sqrt(mse)\r\n",
        "print(\"RMSE:\", rmse)\r\n",
        "r2 = r2_score(y_test, predictions)\r\n",
        "print(\"R2:\", r2)\r\n",
        "metric = {\r\n",
        "    \"MSE\": mse,\r\n",
        "    \"RMSE\":rmse,\r\n",
        "    \"R2\":r2\r\n",
        "}\r\n",
        "mlflow.log_metrics(metric)\r\n",
        "# Plot predicted vs actual\r\n",
        "plt.scatter(y_test, predictions)\r\n",
        "plt.xlabel('Actual Labels')\r\n",
        "plt.ylabel('Predicted Labels')\r\n",
        "plt.title('Daily Bike Share Predictions')\r\n",
        "# overlay the regression line\r\n",
        "z = np.polyfit(y_test, predictions, 1)\r\n",
        "p = np.poly1d(z)\r\n",
        "plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "mlflow.log_figure(fig,\"evaluate.png\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "MSE: 112383.13854863637\nRMSE: 335.2359445952005\nR2: 0.7796799104505484\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZAAAAEWCAYAAABIVsEJAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nO2deZxcVbHHv78MQ5iEJYnkQRh22QyLAUYWcWGRXSQqqxvgAjxBhYeRoD5AxWcUFREXREVAZVMwRkHCEkCJsiQkLAEiYQ0DQlgmEDLAJKn3xzk9c6enl9s9vc7U9/Ppz9x7+t57qu90n7qnqk6VzAzHcRzHKZUR9RbAcRzHaU5cgTiO4zhl4QrEcRzHKQtXII7jOE5ZuAJxHMdxysIViOM4jlMWrkCcmiBpY0nLJLXE/dskfbZZ+8nq81hJd1Szj3ohySRtEbcvlPS/ZV5nmaTNKyudU29cgTipkPSkpG5Jr0nqkvRPSSdKSvUdMrOnzWxNM1s5SDmOlbQyDkjLJD0u6b8r3U+Oft8TP/NSSS9Lmi3pXZXso0y59pS0Kt6L1yQtlHRcNfoysxPN7FspZBqgtOP/5PFqyOXUD1cgTikcYmZrAZsA04DTgV/XQY5/xQFpTeCjwPck7VitziStDfwVuAAYB7QD3wDerEJfq5Vx2rPxXqxN+J/8UtLECl3bcfLiCsQpGTNbamYzgCOBYyRtByDpYEnzJL0qabGkszPnSNo0mkP6DWKSVo9P9Nsn2v5L0nJJ41PIMg94GHhHoX7iexMk3S9pStzfLc4quiTdJ2nPPN1sFfu6wsxWmlm3md1oZvdnXf/7kl6R9ISkAxPtx0l6OM4QHpd0QuK9PSU9I+l0Sf8BfiNphKSpkh6T9JKkqyWNS3EvzMymA68AE+Nsbbak8yS9BJwtaWSU82lJz0ezVFtCnimSnpP0rKRPZ32+SySdk9g/VNL8+P9+TNIBkr4NvBf4SZwV/SQemzSFrSPpMklLJD0l6euZmWzGHFjgXh4b7+Fr8b2PF7svTvVwBeKUjZndDTxDGDAAXgc+BYwBDgb+W9LkItd4C7gS+ESi+WjgFjNbUkyGaEbaCphT5LjNgNuBn5jZuZLageuAcwizii8D1+RRWv8GVkq6VNKBksbmOGZXYCGwLvA94NeSFN97AfggYYZwHHCepJ0S564fZdgEOB74AjAZeD+wAUEh/LTgjQifcYSkDxPu/wMJuR4H1gO+TZg5bgVMArYgzKbOjOcfEO/DvsCWwAcK9LULcBkwJfb3PuBJM/sa8A/g5DhLPDnH6RcA6wCbx8/4qXhfMuS8l5JGAz8GDowz4XcD84vdF6eKmJm//FX0BTwJfCBH+53A1/Kc8yPgvLi9KWDAanH/NuCzcXtX4GlAcX8OcESeax4LrAC6gNfiNS9InJurnx9G+Y9OXOd04LdZ154JHJOn33cAlxAU5gpgBrBeQqZFiWNHRRnWz3Ot6cCX4vaewFvAGon3Hwb2SexPAHoynynrWnsCq+L9eJkwoB6VkOvpxLEiKPm3J9p2B56I2xcD0xLvbRU/xxZx/xLgnLj9i8z/NodMvf/bRJsRFFZL/LwTE++dANxW7F4Co+Pn/CjQVu/fhL/MZyDOoGknDFxI2lXSrdE0sRQ4kfAUWRAzuwtYDuwpaRvCQDOjwCl3mtkYC0+h6wPbAv9X4PiPA53AHxNtmwCHR/NVl6Qu4D2EwTqXjA+b2bFmtiGwHWFm8KPEIf9JHLs8bq4JEGctd0ZTXRdwEP3vyxIzeyNLtj8l5HoYWEmYReTi2Xg/xpnZJDO7MvHe4sT2eMKAPDdx7RtiO/EzJY9/Kk9/ABsBjxV4Px/rAq1Z136K8D3KkPNemtnrBLPpicBzkq6L3xenTrgCccommo/agUwI6+WEgX8jM1sHuJDw1JuGSwlmrE8Cf8waUPNiZs8D1wCHFDjsbOBF4HLF8F7CQPnbOPBmXqPNbFqKPh8hPI1vV+xYSSOjfN8nzFjGANfT/75kp8ReTDDTJGVbw8w6i/WXS9zE9otAN7Bt4rrrWHDAAzxHUAwZNi5w3cXA21P0mc2LhNnUJln9pPpsZjbTzPYlKPpHgF+mOc+pDq5AnJKRtLakDxJ8F78zs4y9fS3gZTN7I9rIP1bCZX8HfJigRC4rQZa3xfMWFDisBzicYAK5LDpsfwccIml/SS2S1ogO7Q1z9LGNpNMy70naiOCnuTOFiKsDI4ElwIroEN6vyDkXAt+WtEnsb7ykQ1P0VRAzW0UYcM+T9F/x2u2S9o+HXA0cK2mipFHAWQUu92vgOEn7RN9Le2I28DzBv5FLhpWxn29LWit+xv8h/D8KImm96LgfTYiAW0Yw3zl1whWIUwp/kfQa4enzawTfQtL5+Xngm/GYMwkDRSrMbDFwL+Hp9R9FDt89RvgsI5h3lhAcz4Wu/xbwEYIZ6GLCE++hwFfj+YsJDuFcv4nXCH6auyS9TlAcDwKnpfhcrwFfJNyLVwhKtZB5DuD8eMyN8V7eGfuvBKcDi4A7Jb0K3AxsHWX9G8EsNyseMyvfRSwEUBwHnAcsJQQoZGYV5wOHxSiqH+c4/QsEX8zjhNnr5YT/STFGEJTNswSz6fuB/y54hlNVMo5Hx6k7ki4m2PO/Xm9ZHMcpji8schoCSZsSZghVWxDoOE5lqZoJK9qU71ZYoLVA0jdi+2aS7pK0SNJVklaP7SPj/qL4/qaJa50R2xcm7LXOEEHStwgmoXPN7Il6y+M4TjqqZsKKi6hGm9kySa0EW+eXCDbMa83sSkkXAveZ2c8lfR7YwcxOlHQU8GEzO1IhJcMVwC6EMMObga2swrmOHMdxnNKo2gzEAsvibmt8GbA3ffH4lxJW3EJwaF4at/8I7BOV0KHAlWb2Znw6XURQJo7jOE4dqaoPJMbczyUsDPspYeFRl5mtiIc8Q98ConbiIiYzWxEXor0ttifDJZPnJPs6npAGgtGjR++8zTa+vshxHKcU5s6d+6KZFc1Bl6GqCiSamSZJGgP8CajaqG5mFwEXAXR0dNicOQVTIzmO4zhZSCqUfWAANVkHYmZdwK2EvDtj1JcpdUP6VqB2ElfBxvfXAV5Ktuc4x3Ecx6kT1YzCGh9nHiiki96XsOjrVuCweNgxwJ/j9oy4T3x/lgUP/wzgqBiltRkhS+jd1ZLbcRzHSUc1TVgTgEujH2QEcLWZ/VXSQ8CVCnUF5tFXkOjXwG8lLSKsMj0KwMwWSLoaeIiQBfUkj8ByHMepP0NyJbr7QBzHcUpH0lwz60h7vOfCchzHccrCFYjjOI5TFq5AHMdxnLJwBeI4jjMUMEKBgQtq16Vn43Ucx2l2biYslMhQsDpO5XAF4jiO06xkEj5lFjZsCPy7dt27CctxHKcZORUYQ5/yuJuQTbCtdiK4AnEcx2km/gmIUHwYQpFiA95Ve1HchOU4jtMMLCdUnX8x7o8GngPWqptEPgNxHMdpeL5JUBgZ5TELWEZdlQf4DMRxHKdxuQ+YlNj/HLFoRWPgCsRxHKfReBPYgf4RVS8SIq4aCDdhOY7jNBI/AtagT3n8heAkbzDlAT4DcRzHaQz+DWyd2D8cuIoQcdWguAJxHMepJyuA9wJ3Jto6gQ3qI04puAnLcRynXlwCtNKnPC4nmKuaQHmAz0Acx3Fqz9OENR0Z9gFupOke6ZtMXMdxnCZmFXAQ/ZXH44RkiE04GjehyI7jOE3INUAL8Le4fyHBXLVZ3SQaNG7CchzHqSbPA+sn9icREh+21kecSuIzEMdxnGpgwCfprzwWAPMYEsoDXIE4juNUnpmE0fV3cf+7BIUysW4SVQU3YTmO41SKV4Bxif1NgEcIK8uHID4DcRzHqQRfpL/yuAd4kiGrPMAViOM4zuCYTUg3ckHcP4Ngruqom0Q1w01YjuM45fA6sDHwctxfG3iGutfoqCU+A3EcxymVM4E16VMetwFLGVbKA6qoQCRtJOlWSQ9JWiDpS7H9bEmdkubH10GJc86QtEjSQkn7J9oPiG2LJE2tlsyO4zgFmUcwV30r7p9IMFe9v24S1ZVqmrBWAKeZ2b2S1gLmSropvneemX0/ebCkicBRwLaEVGI3S9oqvv1TYF/CBPEeSTPM7KEqyu44jtPHm4SR6bFE20v0d5oPQ6o2AzGz58zs3rj9GvAw0F7glEOBK83sTTN7AlgE7BJfi8zscTN7C7gyHus4jlN9fkiIpMooj+sIs45hrjygRj4QSZsCOwJ3xaaTJd0v6WJJY2NbO7A4cdozsS1fe3Yfx0uaI2nOkiVLKvwJHMcZdiwkmKtOi/tH0ZcM0QFqoEAkrUlII3aKmb0K/Bx4OyEjzHPADyrRj5ldZGYdZtYxfvz4SlzScZzhyArgXcA2ibZngSto6OqA9aCqCkRSK0F5/N7MrgUws+fNbKWZrQJ+STBRQajBtVHi9A1jW752x3GcyvJrQp6qOXH/SoK5akLdJGpoquZElyTCv+NhM/thon2CmT0Xdz8MPBi3ZwCXS/ohwYm+JSFnpYAtJW1GUBxHAR+rltyOU2umz+vk3JkLebarmw3GtDFl/62ZvGMhd6FTLrnuNcBlVz7Ftd97d9+B+wI34AsdilDNKKw9CLkoH5A0P7Z9FTha0iSCXn8SOAHAzBZIuhp4iDCJPMnMVgJIOpmQnqwFuNjMFlRRbsepGdPndXLGtQ/Q3bMSgM6ubs649gEAVyIVJte9/srV9/Grq9/FtY/3KY99Tr6dL3x6CyaP8PtfDJlZvWWoOB0dHTZnzpziBzpOndlj2iw6u7oHtLePaWP21L3rINHQJfteH/TI+vzszzv37p9+wP1c9c4QrzNc77+kuWaWOgmLpzJxnDrybA7lUai92gxlc1rmno5fNpJ7fvqB3vb71u/iI5/8JytH2IBjncK4AnGcOrLBmLacM5ANxrTVXJahbk7bYJ02Tv/t1nzo4b7Pss9nbuexdZcNPLYO93+w1EP5uwJxhi2N8LQ9Zf+t+w3aAG2tLb3O3Vpy7syF/eQA6O5ZybkzF9b0vlTl//I3mP3VPpPUOXs9xK92eYLWEaJVomdl3+yjXvd/MNRL+bsCcYYljfK0nemr3ooMGsOcVvH/S1aBp9c3XMHBJ/yDp5Ytpz0RhdUI938w1Ev5uwJxhiWN8rQNYWBshAGrEcxpFf2/nAT8LLE/F0bvtBq3sdeAQxvh/g+Geil/VyDOsKQRnrYbjTTmtHLNS2nPq8j/5e/0z477dfqy5zYA1TDR1Uv5+zIZZ1iS74fVjM7TSjF5x3a+85HtaR/ThgihrN/5yPa9g1vGvNTZ1Y3RZ16aPq9wYohSzhvU/2UZMIY+5TEGeI2GUx7l3MNiTNl/a9paW/q11cKX4wrEGZbU6wfX6EzesZ3ZU/fmiWkHM3vq3v2ejAuZlwqR77xTrprPHtNm9Rs8y/6/fJ1QzGlp3P87wf+xZuHTak2597AYxZR/tXATljMsaSTndbNQrnmp0PvZTvKS/y/3Ajsn9k8CflJQnLpSTdNpPXxprkCcYUujOK+bhXLt7PnOy5DtJE/1f3kDeAchGVKGl2H6k52cO61xHwoaIVChkrgJy3GcVJRrXsp1XjYlPYF/H2ijT3n8DbCgPKrhX6gkQ8106jMQx3FSUa7ZL3levplIqifwh4GJif2PAb+jt0ZHI4Vm52OomU5dgTiOk5pyzX6Z87IXCkKKJ/AVwK4Ef0eG/wDr9T+s2qHZlQq/HUqmUzdhOY5TM0qOFvolocBTRnn8gVAIYr2Bh1YzNLta4bfNjs9AHMepKamewJ8ANk/sHwj8lYKPvOXmFUszs2gG81g9cAXiOMOIRkggWZBVwH7ALYm2J4FNip9ajn8hbe4tz1yQG1cgjlNlGmXQbpQEknm5ilCwOsOvgU+XdolS/QtpZxZDLfy2UrgPxHGqSCPZzqu1CnrQPEeIpMooj12BHkpWHqUyfV5n3qiw7JnFUAu/rRSuQBynijTSoN1wZhgDjgQ2SLQ9AtxJ1W0jGcWej+yZRb1ShTQ6bsJynCqSb3Du7Opm+rzOmg5ADWWGuQ74YGL/h8Cptes+l2LPkG9mMZTCbyuFz0Acp4oUGpxrbcpqCDPMywRzVUZ5bElIS1JD5QGFZ10+s0iPKxDHqSKF0njU2pSVJl37HtNmsdnU6wZkya0IGwJvS+zPA/4NjKxsN2nIp9jbx7S58igBN2E5TUmjRDYVIyPTKVfNz/l+rf0P+cwwVY3QuhQ4NrF/IvDzwV1ysDRSLfpmxhWI03TUOxy1VOU1ecf2vHmgGiUMtCoL5V4C1s1qe4VQ6KnODLWcVPXCFYjTdFR7VXAhBVGu8mr0J96KR2jtAtyT2L+C/ms8GgB3ig8eVyBO01HNcNRiCqJc5VXJJ96Grqk9Azg0sb8VUOdlJk71qJoCkbQRcBkh7ZkBF5nZ+ZLGEdacbkpIUnCEmb0iScD5wEHAcuBYM7s3XusYQtFKgHPM7NJqye00PtUMR82nIM6esaBgOvI0yqsST7zVMt8Neoa0jFBSNslzwPpli+Q0AdWMwloBnGZmE4HdgJMkTQSmAreY2ZaEjDdT4/EHEoL6tgSOJ7rZosI5i7A+dRfgLEljqyi30+BUMxw1nyLo6u4pWFWvVr6Mhqyp/SH6K4+fEx4ZXXkMeYrOQCQdDtxgZq9J+jqwE2EWcG+h88zsOcIzCPHch4F2wgR3z3jYpcBtwOmx/TIzM+BOSWMkTYjH3mRmL0d5bgIOIFhVnWFINR2gxcqv5qKWvoyGqql9G7BXYn8tYCm9BZ6coU8aE9b/mtkfJL0H+ABwLuEZY9e0nUjaFNgRuAtYLyoX6F8Wph1YnDjtmdiWrz27j+MJMxc23njjtKI5TUq1HKC5TDmFaK9x9E5DrCZ/E1gjq+1xYLPaieA0BmlMWJlf0sEEP8Z1wOppO5C0JnANcIqZvZp8L842LO21CmFmF5lZh5l1jB8/vhKXdIYhuUw5Y0e15jy2fUwbs6fuXdNInrqvJv8s/ZXHOYRfsCuPYUmaGUinpF8A+wLflTSSlL4TSa0E5fF7M7s2Nj8vaYKZPRdNVC9k+gE2Spy+YWzrpM/klWm/LU3/jlMO2bObssqwVlE2qMP6hblAR1bbSqrqRW2WxaLDGYVJQIEDpFEEn8MDZvZoHPS3N7Mbi5wngo/jZTM7JdF+LvCSmU2TNBUYZ2ZfkXQwcDIhCmtX4Mdmtkt0os8l+F4gFLfcOeMTyUVHR4fNmTOn8Cd3nBRkBrHOrm5aJFaaVcRs1TSD40oGPmY+CGxb3W7zKW3PU1VdJM01s+xHhbzkfX6QNC4O3msQnvhfivtvAmlG5z2ATwJ7S5ofXwcB04B9JT1K8KlMi8dfT7CkLiJUQv48QFQU3yIsS7oH+GYh5eE4lSJZywNgpVnvzGOwyqNRaoQU5Az6K49TCOaqKisPaKw0+E5+Cpmw5hK+LrliKoz+FYsHHmB2R55zAfbJcbwBJ+W51sXAxYX6c5xKU60V7w1fX3shsE1W21tAbldQVWi42iVOTvIqEDNzt5gzrKnWINawg6Mx0CbxL8IqrhrTENFmTlGKusAU+ISk/437G0vapfqiOU59yTdYDXYQq9Z1B8UP6D8afIygUOqgPKABos2cVKSJofgZsDvhKwXwGvDTqknkOA1CrkGstUW8/uaKQdXMaKjBcTHB0PzlRNty4Pe1FyWJl5BtDtKE8e5qZjtJmgcQ81alXgfiOM1KdsjsmFGtLHtjBV3dPUD5eagaJpX4+sDzif2ZwH61FaEQni238UmjQHoktRAX/EkaD6yqqlSO0yAkB7E9ps3ileU9/d4v1/ld18HxYuAzif29CVnpHKdE0iiQHwN/AtaT9G3gMPoy4zpO05N2TUbDOr/T8iKQnaShC1gn3elNs3bFqRlFFYiZ/V7SXPpCbyeb2cPVFctx0jHYQa2U9OhNHRm0I5Csqns1cHj60+tdBdJpTNImIhgFtMTjm+DX4gwHKrEgr5QFaw3l/E7LnwhO8ozymEgwRpegPMAX9jm5SRPGeyYhJck4QoXj38S07o5TVyoxqJVilmqqyKDXCIrjI4m254EF5V2u6c13TlVI4wP5OPBOM3sDQNI0wvPMOdUUzHGKUYlBrVSzVFNEBh0I3JDY/wWx0EH5NLX5zqkaaUxYz9I/gfNIQoZcx6krlViQ15RmqXzMIsw6MspjLCFecpDKA4bYfXIqRt4ZiKQLCNbSpcCCWAnQCGnd766NeI6Tn0HX8aaB1mQMhjcY6Jl8Ati0cl0MifvkVJy86dwlHVPoRDO7tCoSVQBP5z58GPahpccBlyT2vwNMrY8oTvNTajr3QskUG1ZBOE6GpvBJVIN7gOyMdFUu8OQ42RR1okvakvBcM5GEL8TMCqZzdxynCqxgYFr1BYRfp+PUmDTPK78Bfk746u4FXAb8rppCOc5wYvq8TvaYNqt4gsav0F95nEbwSrrycOpEmjDeNjO7RZLM7Cng7Lgy/cwqy+Y4VaeWPpRcfQHFV3g/zEAl0UO6X6/jVJE0X8E3JY0AHpV0MiGEd83qiuU41aeW6Tny9bVG64j81QkntQ+0EdzFQN+H49SJNCasLxFSmXwR2Bn4BPCpagrlOLUg30r2s2eUuVy7jL6ys/tmOOSGCf1/nZ8imKtceTgNRJpkivfEzWWEoEEkfZ/wLOQ4TUu+Fetd3T1Mn9dZ0VlI2tXx7UvbmH3h3v0bu+m/lNdxGoRyg/6OqKgUjlMHCq1Yr3SSwHx9jWlrDSu8Deadv29/5XEzYdbhysNpUMpVIKqoFE5TkzqKqMEotGK90kkC86UCOftD23K5duXJ7x3M2DdCoc/nd38jKI59clzIcRqIQqlMxuV7C1cgTqSZ60RM3rGdb/xlQU4/RKWTBOZKBfK1d72Dg3aa0P/ApbDe2j7lcJqDQj6QuYTnoFzK4q3qiOM0GsXCXAulVG90BQJw1iHbDsinBfD6mysq7gfpt2p+e+CMxJvX0D/1ujNsaab0PIVSmWxWS0GcxiPN7GKwKdXr/WPJ9JU9E+nq7qnOTOqP9C/mtANwX+Uu7zQ3zTaj98w5Tl7SFGwaTEr1SlQUzL5eOb6YyTu2M2r1gc9SFa24t5Qwl08qjxdw5eH0o9kqP1ZNgUi6WNILkh5MtJ0tqVPS/Pg6KPHeGZIWSVooaf9E+wGxbZEkzzNaQ9LMLgZTJ6LQj6VUZTBYZVTVinv7AWMS+78iGIfHD/7SztCi2So/VnMGcglwQI7288xsUnxdDyBpInAUsG0852eSWiS1AD8l1FibCBwdj3VqQJrZxWDKvOb7UWQG/1KUQbEnt2IKqRLFqQZwM2HWcVPc/y+C4vhM+Zd0hjZV+R5WkbwKRNK4Qq9iFzazvwMvp5TjUOBKM3vTzJ4AFhHW3O4CLDKzx83sLeDKeKxThEqE1qaZXQzGh5HvR9EilTyNL/TklmZ2UtGKe90ExbFvou0pQk1yxylAs1V+LDQDmQvMiX+XAP8GHo3bcwfR58mS7o8mrrGxrR1YnDjmmdiWr30Ako6XNEfSnCVLlgxCvOanUr6FYrOLwfaT78eyMk+Rs0LT+EJPbmnsyoOZSfXjk4TEPxm+R5h1bFzaZZzhScW+hzWiaBSWpF8Cf0qYmw4EJpfZ38+BbxF+Ut8CfgB8usxr9cPMLgIuglCRsBLXbFYqGVpbqGDTYPvJVyb13JkL6cyhLApN4wuVtz31qvk5z8lWSIMqTnUXsFtW2yp8xZRTMs1UJC1NNt7dzOxzmR0z+5uk75XTmZn1TuKjYvpr3O0ENkocumFso0C7k4daOeIq0U++H0uptc4L1ewuRyGlpgdYPavtYWCbwV/acRqdNArkWUlfp6+I1MeBZ8vpTNIEM3su7n4YyERozQAul/RDYANgS+BuwvPblpI2IyiOo4CPldP3cGKDMW0VHzBz+Tqq0Q8UVgbFzst1TKHZyaA4DfhhYv90YNrgLuk4zUQaBXI0cBbwJ4Lp6e+xrSCSrgD2BNaV9Ey8xp6SJsXrPAmcAGBmCyRdDTxEqHx4kpmtjNc5GZgJtAAXm1nlc20PMSo9YOZb3PTRndu5Zm5n5QdmKjuNL1ch5WUBsF1WWxMVeKr34k1n6CDL47AccKA02sxer7I8FaGjo8PmzJlTbzHqSiUHiT2mzco502hP+CyGxWC0ivAYk+QeoKMOspRJ9sMABKXfyI5ap3ZImmtmqb/RRZ+ZJL2bsPRpTWBjSe8ETjCzz5cvplNtKvkEX8jX0UwOv0HxHeCrif3jgIvrJMsgaPbcZU5jkWbSfR6wP8FPgZndJ+l9VZXKaSgq6etoOvPJk0B2Vrg3gJG1F6USNNtKZ6exSbUS3cwWZzWtzHmgMySp1OKmSue+qioGrEN/5TErtjep8oDmW+nsNDZpFMjiaMYySa2SvkwIVHSGCZVa3NQ0ieIuJPwyXo37BxMUx151k6hiNNtKZ6exSWPCOhE4n7ACvBO4EXD/xzCjEr6OhjefPA+sn9X2KrBWHWSpEhWPSHOGNWkUyNZm9vFkg6Q9gNnVEckZqlRr3UhF/CoT6T+vns6QzbpWzcCHpvNxOYMijQnrgpRtjlOQaphPBu1XuZqwXDWjPHYmmKuGqPKoJk3l43IqQqGa6LsD7wbGS/qfxFtrMzAa3nGKkqv638jVBldRoOyw1C5gbFbbEmDdQYkzrPEQ4eFHoV/v6oS1H6sRrMCZ16vAYdUXzRmqvNGzqnc7Uzq23KfUsvwqe9FfefyGMOtw5TEoGt7H5VScQtl4bwdul3SJmT1VQ5mcIUyln1JL8qvMpH+JswmUmdXNyUW1fFxO45LGfvArSb0FOSWNlTSzijI5Q5jBPKXmKpKVyq+ynODnSCqPxbjyqDAeIjz8SKNA1jWzrsyOmb1CKM7pOCVT7kK2fA5aoPAalaOB0YkL/YBgrtpwkB/EGUCzFUNyBk+aMN5VkjY2s6cBJG1C+Ak6TsmUmym4kOlr9tS9Bw5S/yKEgCTxAk9VZ9jkRnOAdArka8Adkm4n/PzeCxxfVamcIUGhNQGlrhVIbfrKVeBpIbBVeZ/BcZz8FFUgZnaDpJ3oK9h5ipm9WF2xnGYnXw0RKO8pNZWD9kvAjxNvfhX4domCF8AXycKA0JwAAB7lSURBVDlOf/L6QCRtE//uBGxMcDk+S0jpvlNtxHOalUrnvSrooH2AMDdOKo8VVFx5+CI5x+lPoRnIacDnCG7HbAzYuyoSOUOCSq8JyGn62ndrJu+UNQOYC1Th8cYXyTnOQAqtA/lc/DsEcpA6taYaawL6mb6+Rf9KgJ8DLir70kXxRXKOM5BCqUw+UuhEM7u28uI4Q4VK12Xv5XHg7VltNSjwlE8hGqHkr/tDnOFIIRPWIfHvfxECImfF/b2AfwKuQJy8ZJucxoxqxQxOvWo+585cWPqAa4TEOsv7mo46+l8s3qGbKQ9t3a+vaji499pmPL+/8+mc8evZAQKOM1yQWeElHZJuBI4xs+fi/gTgEjPbvwbylUVHR4fNmTOn3mI4keyILAizkdSLzH4GnNS3e/NWz/PZD/f9f1tHCAQ9K/u+yyVdvwz5c9E+po3ZU9016DQvkuaaWUfxIwNp1oFslFEekecJUVlOk1OrsNSyHdD/IeSrSvCBs29nUfeyfm09qwY+BFXSwZ1L/ly4P8QZbqRRILfE3FdXxP0jgZurJ5JTC4qt06gkZTmgtwQWJfZnAIfAY1OX5TmhtOuXojzTKgZPGugMN4rmwjKzkwlVot8ZXxeZ2ReqLZhTXcpZp5ErmWEaSsp/dQVhTUdGeexK8H8cUvhapfRb6pqONH160kBnOJK2ms+9wHVmdiowU9IQqhI9PCl1VjCYhXT5FgHutc34XoV0wFl/D4rjY4mDXgTuLH6t1hGitaV/kqtCA3qpyjNnny1iTFurJw10hjVFTViSPkfIfTWOEEDZTpiR7FNd0ZxqUuo6jcEspMu1CHCvbcZzzdxOuntWctXvd2PXZ97Wd8JlwCfTXyujKNJWOixVeZabv8txhjppfCAnAbsAdwGY2aOSPJ17A1GOMzzNOo3kdfPF6qX1D2Tnv9pj2ix2fWQcl/xxl962zrW6OeKr/2L2JwtHMuXKpTV9XmfOSoeZ45OUs8jRs8w6zkDSKJA3zewtKZgIJK1GinTuki4GPgi8YGbbxbZxwFXApsCTwBFm9orCxc8HDiJE+h9rZvfGc44Bvh4ve46ZXZr60w0DynWGF3uqThu6Wpbj+HWYfUZ/JbHr52/m+bXehK7yFuYVM0vlm/1kcB+G45ROGgVyu6SvAm2S9gU+D/wlxXmXAD8hGCQyTAVuMbNpkqbG/dOBAwlxN1sS3KY/B3aNCucsQtIKA+ZKmhGLWjkM3rSU75g0oasiLLAricOBP/btfmOfBfym48l+h5QTEZZvJpS5VlLBXjO3k4/u3M6tjyxxk5TjDII0CuR04LOEnKcnANcDvyp2kpn9XdKmWc2HAnvG7UuB2+L1DwUus7Cq8U5JY+KCxT2Bm8zsZQBJNxEKk16BA1QnR9P0eZ05TTzZGHDN3E46NhlXcPCdPq+TG37xHy78xc69bStGrGKLL/8tb4GnUtdx5DNLtUg5Fexf73uO+Wftl+rajuPkpmAUlqQW4GEz+6WZHW5mh8XtcisSrpdYlPgfYL243U6oUp3hmdiWrz2XrMdLmiNpzpIlS8oUr/kot0RsPr4+/QFOvWp+6uOLhf7++e5OJu/U3k957HPCbWwxJb/yyFCKEswX6bUyz1e1q7vHU7E7ziApqEDMbCWwUFLFV55HJVSx0rhmdpGZdZhZx/jxJZpVmpiCdTJKZPq8zrz5ngqRGeiz14k8eOpSDt21T9+f/+5H2fT063hszOuprluKEsxXj7u9wDXKrU3iOE4gjQlrLLBA0t1A7y/fzD5URn/PS5pgZs9FE9ULsb0T2Chx3IaxrZM+k1em/bYy+h0y5Iq4+s5Htq9IiOm5MxeWpdE3GNPG16c/0Kt8Nlzaxh3f7e8k33zKdaxKu+qI8pRgPp/OKXlmVJ56xHEGRxoF8r8V7G8GcAwwLf79c6L9ZElXEpzoS6OSmQn8n6Sx8bj9gDMqKE9TkFEanV3diL5pW8ZB/J2PbF9yEr9ciqicATWzIPD3dz4NBpddvQvve7JvBvi+E2/l6XWWF7jCQNor6NSevGN7v/UhSTz1iOMMjkL1QNYATgS2IDjQf21mK9JeWNIVhNnDupKeIURTTQOulvQZ4CngiHj49YQQ3kWEMN7jAMzsZUnfAu6Jx30z41AfLmSH02bPELKdzWnWhOQL/V19tRG8uWIVuWhtEece9k5gYOjvuTMXcuAj6/OzP/f5Oabufz9XTgruq9YRypnwMImAj++2MedM3r6fnIXCjNPOus46ZNvq1CZxnGFO3nTukq4CeoB/EMJsnzKzL9VQtrKpZTr3ame03WParKIRUQKemHZw6rTpaa6Zi5zpyrMy5t6/fhcf/uQ/WTnCes9Z/taKnDOADGPaWjn7Q9v2kzFpEsv+LEDJ6eFrlXnYcZqZUtO5F1IgD5jZ9nF7NeBuM6tCtenKUysFMug6FynYbOp1Rf0SmYE9n2LIHvg3nXpd2fL86MhJ4bMZIW/VlX3v7fOZ23ls3b5suQLOO3ISp141v+hnSJrmCpFxiqf5nKXgCsZxSlcghdyavY+MpZiuhhPlZLQtlWJ2+qQpJs2akMGGrp5x7QP864IXwzcnKo8HT1nKO75+wwDl8fHdNmbyju2pfA1pnffPdnVXfO3LYBJFOs5wppACeaekV+PrNWCHzLakV2slYCNTjUV82eQK080sn8jOAltsTcj0eZ2cdvV9ZcuyTncrD59zALt/cd3QsDnQDdudt86AENrzjpzU68/I9RnKlqGtteJrX2rxIOA4Q5G8TnQzq8wvfghTTlK+UiklE2yhBImZp+x8C+uK8c0bt+VT8zbta5gL7DTQ9HNexsSV4zOcPWMBXd35fSFpeP2tFXzwnRMqmsuqFg8CjjMUSRPG6+QhTUbbSlAsE2xyEB8zqpWRq41gaXdPP2Wzx7RZqcqyZrPL4nFcffnuvfsX7P4oV35oMbN32rtoIsds5XL2h7YF6A1JLoeelcbv7nyasXk+ZznU4kHAcYYirkAGQSPUicgexF9Z3kNba8uAmUCpT9Oj3mrhzp/uw9pvtQKwdGQPu3/+Fmw0fGf/YJoqZvrJpVwya1bSZvvNxyvLe2htUc4ZT6nU6kHAcYYaeaOwmplahvHWm0KRV5k1GqU+7X/571tz8r+26N0//GP/5J6NXqFF4gdHvLN3wM4XISYKJzdcZdabVv3WR5bkPO4Tu22c970kY0e1Mu/MwSdF9Cgsxyk9CstnIGXSKANO2jTmadjuP2vz10vf27t/6U5Pcta+C3r3V5n1+4yFTD/55Mr4YJJp1XP5Mzo2GUfHJuOKfoZC60tKwQtGOU7plJCdyMnQSGGf+ez0udKY52PkihH848K9+imPHb40s5/yyNVXoUSOafwH3T0rueKuxQXrmRRLiOg4Tv1wBVIGjRT2WWoa82yOv2tzFv7gQDZaOgqAYw+7m01Pv45X1+i/9EcERbnHtFm9ijJfBtzJO7anDt3NJ2dmBjN5x3ZmT92bMW2tOY/L1+44TvVxE1YZ1DvsM9t8lqu6XjHfx9tfXJNbfv3+vmtO7OSUD87PW6MjO4Ej9Jl9cpl+Ju/YzpynXi4rPTwMnO2c/aFtmfKH+/rl1Godod7ILsdxao8rkDKoddhndpjusjdW9A6kGV9CrvQpufwHLavEny/bg+2eX6e37V0n3cySNd9MLU/aaoG3PrKkLOWRKwKqESLeHMfpjyuQMqhk2GcxZ3yuMN1scg3ome1kKvOj5m/EtJk79B7z+UPncv02/ylZZhg426pUevixo1o565Bt885qXGE4TuPgCqQMKvU0XGwhXqaPNM7wfIP1Gz2r2LCrjTt+0Zdk8LbNXuC4w+/BipSULURytpXvc6zT1lryyvNRq6/mSsJxmgRXIGVSiafhQs74zLXTPsXnMp99/28L+eVvO3jPU+v2tu1x4iw618l9zbGjWnmjZ1U/mVpGiJVZtTxaR4jlb61gs6nXsUFM157rc6zROoK21pZ+7wloax3B8p7cdUc8fYjjNA8ehVVH0jjj0/hVcprProQ7vrZ3r/L4ygH3s+np1+VVHgBdy3v6RVWNXr1lgPKAEDn1yvKe3hDmfGsxupb38NGd2/v55Y2QjiQfnj7EcZoHn4HUgHx+jjTO+Cn7b523pjfkKP/6HLBB3/vzJ7zCRz/xr94CT4XYYExb78xq+rxOTs3Tb5Higv2ul8uR3rPKGNU6gu6eVQMKRnn6EMdpHnwGUmUKLTostBAvw+Qd2xk7Kvdah0wBpd4CT0fQT3kcevIdHH5cOuWR3e+5MxeWFUGVfb18s6zunlWcd+SknGtIHMdpDnwGUmUK+Tky1fOKOeOL1vS+Dvhg3/Hf2vshfv2uJwBoNTF2VGvBlB8DZjGU7osY09bK6JGrDfgc+dajJGc7juM0J65AqkwxP0eaQTRv1NfG7f0W/i1+23L2OfZ23lqtz0Hds8oYtfpqdEWfRTaCnGVg85nXIDjRkwv62lpbBtQ0z+CZbh1n6OIKpMpUatHhAEVzAnBR4oB74b1X3Zrz3IzSySXHCInp8zoHrD1Z/tbAKsaZMrUdm4xLHcLsCwAdZ+jiCqTKTNl/65wpOMp+Ar8d2DOxfybwjTDoi9y1xTODdq6V6SvNBhSBynXcmLbWfrOMUhSAm6ocZ2jiCqQWZC/YS7mALxm9tUXbmlz/vffSujzGPYwDngZGh918Tm9Bvyf+066+b0ACw+Tak3wLF0eP9AV+juP0x6Owqsy5MxcOWPfQs9KKZu5NRm9NuX1rbjr7/X3K4w7gJXqVB+T3tRj0mzWsypP9trOrm+nzOuueKNJxnObBZyB5qETBqOnzOvM6oosNyOfOXMiWT6/JjMve09v2m52f4FeHPcHsPdI7vbNraRRyjp9x7QOMyROx5Qv8HMfJxhVIDnLldpryx/s4e8YClnb3pFIomWvko+CA3A1/+L/d2eC1cMwqjElfupFX11iBunKfkibaKZ9zvLfbnpWMXG1g+hGPmnIcJxd1MWFJelLSA5LmS5oT28ZJuknSo/Hv2NguST+WtEjS/ZJ2qrZ8ufwAPSuNru6+9B2nXDWfHb95Y94qhIWSILa2FHCifxcYRa/y+OQRd7H56df3FnjKp3gKFXeCPoVWrATs0u6egtdxHMfJUM8ZyF5m9mJifypwi5lNkzQ17p8OHAhsGV+7Aj+Pf6tGWnv/K8t7BmTPTXON0auH277HtFm9JrJvbrEt+xy+Xu8xf93hWU49eP6A9Rb5FE8xk1varL7NssCvUWrSO85wppFMWIfSF6B6KXAbQYEcClxmZgbcKWmMpAlm9ly1BCnkJ8gmX3GlQtfo6u5hyh/vo2elsdpK8asfdvCOJWv3vr/zyTfx0ui3aCWsIu9anttslhlEO7u6+4Xw5koLn0YpNoupKk0afMdxqk+9orAMuFHSXEnHx7b1EkrhP0DmcbwdWJw495nY1g9Jx0uaI2nOkiVLBiVc2nreGXINzlP237pgtG7PSuPj8zZm0fcP6lUeJ06ey6anX8dLo98Kx8TZxwZj2ni2q5tzZy7sNZklo7Rg4PqP7Brt+UxfLVLTmaoaqSa94wxn6jUDeY+ZdUr6L+AmSY8k3zQzk1RSLj8zu4i4Nrujo2MweQAHrJ7OLiObTa7BuVBN8I262vhHosDTLW9/ns98dE7O9SGvLO/p9Vskn7TTmKSSii2fk71ZlEYSDzV2nMagLgrEzDrj3xck/QnYBXg+Y5qSNAF4IR7eCWyUOH3D2FZVsv0A0+d1cvaMBQMq7BUy+5wzeXs6NhnXm45dBpdfuRu7P/223mPe/d+38Ozab6SWK/OknWawTCq2oZRSpNY16R3HyU3NFYik0cAIM3stbu8HfBOYARwDTIt//xxPmQGcLOlKgvN8aTX9H/lI1skoZRDOrO7e+Z9j+fFfduxtn3Lgffxhh2d693NV/stHodxWGXIptmZwjqfBEzQ6TmNQjxnIesCfJGX6v9zMbpB0D3C1pM8ATxGqWwBcDxwELAKWA8fVXuQ+Sh2Eb7jxOWaf0WeumrvBKxz+8X+yKsv7ZFnKQ8AasehSNoVyW2XO/ejOQ0NZ5GIozaYcp5mpuQIxs8eBd+ZofwnYJ0e7ASfVQLSyyDsjMXj2A90cMGtC77F7fe42nhj3es7rZKsJA9ZobQGU80m7UG4rA259ZElh+ZqcoTKbcpxmRpYnN1Iz09HRYXPmzKnKtZMD8jptrbz+1op+ua7aWlv4zdvexW6n9vk5vrHPAn7T8WRZ/X1it4259ZElvQpgr23G99vPZ8YScN6Rk4aM49xxnOojaa6ZdaQ+3hVIevKlOs8wdnkr8y7Yr3f/sXHLOODTf6enpfx73Nbawkd3bufWR5YMWO8B5E3hnsmBlS8/Vq4iUo7jDG9KVSCejbcECoXOfudv2/dTHsyHT025O6fySJnNHQhRV7+/8+m86z0sx/WK1SP3cFfHcSqBK5ASyDXw7v7U23jyuwdz9P0bA3DeHv9m09OvY4+/zWKvbcYPWJAo4N1vH9eba6pFxdVJsfmLQc7cVfnCWj3c1XGcStBIqUwanqTPYc03V2POTz7AGiuCglgy6k3ee+Is3mgN7vDOrm5+d+fTA65hwL1PL+0d5IuZxdKQzyTl4a6O41QTVyApSaZCn3rrNpx499t73/vIJ2Zzb3uePOs5SObPyjiz/+fq+aRcBtKPQgrBw10dx6kmrkBSkJklbPXUmsz7bV+Bp4t3foJvfuChsq6ZbQ5rkfJWC8xHi1Q0oiqppDIRZKdeNd+VieM4g8YVSArO/+uj3PqjPVl/2RoA9IxYxU5fvInXRq7IGwVVjKQf4tyZC/Pm2cpHqeG4nsHWcZxK4wqkGP8Ht565Z+/uJ464izs26ytjUo7yyDY7pY2Kyiir9jJmD4Uy2LoCcRynHFyB5OMBYIe+3T9st5gpB91fWgxuDnKlGUlTf6QcpZHEQ3odx6k0HsabTQ+wHf2Ux05fuIkpBw9eeUD/NCMZitUfaZEG7a/wkF7HcSqNz0CSrAJW79s94cNzmLnV8xXvJvPUn0yLMmZUK8JYniN54kqzXn8FlBdV5SG9juNUGlcg2XwSWAqbbXMdVoEZRy42GNM2wKn9yvIe2lpb+MRuG3PFXYsHJEjs7lnJ2TMW8OaKVWU5wj2k13GcSuO5sPKwx7RZqeuil0ImeipTyzyb9li+tpT/iue2chynEngurApRSdNOZiKTTDNSyKldql/CHeGO49QDVyB5mLxjOyNXG/ztGTuqlfOOnMST0w5m9tS9e01GhZzauZzqba0tjB3Vmvccx3GcWuMKJA/T53Xy5oqBDu1SGbX6ajn9DPmURMYv8Z2PbD8gQeJZh2yb9xzHcZxa4070HEyf18lpV99XkWvlMy8Vc2oXqrjnjnDHcRoBVyAJps/r5Bt/WcAry3sqds1C5qVyyrJ6KVfHcRoFVyCRSqRVz6a1RW5echxnyOI+kEihaoNlM/QipB3HcXpxBRIpNRS2ZYRoay18+3pWGefOXDgYsRzHcRoWVyCRUkJhx45q5QeHv5OHv3UgPzpyEu0FzvU1Go7jDFVcgUSKJTTM0NbawlmHbNsvWmr21L3zKhFfo+E4zlDFFUgkufaiEJkaGtkUWtfhOI4zFHEFkiAzmyhGLrNUvsV/HnLrOM5QpWnCeCUdAJwPtAC/MrNp1epr7KjWgmtB8pmlfI2G4zjDiaaYgUhqAX4KHAhMBI6WNLFa/Z11yLa0tuTO5e5mKcdxnECzzEB2ARaZ2eMAkq4EDgUeqkZnyTQjnV3dtEisNBt0WVnHcZyhRLMokHZgcWL/GWDXanbo5ijHcZzCNIUJKw2Sjpc0R9KcJUuWFD/BcRzHGRTNokA6gY0S+xvGtl7M7CIz6zCzjvHjx9dUOMdxnOFIsyiQe4AtJW0maXXgKGBGnWVyHMcZ1jSFD8TMVkg6GZhJCOO92MwW1Fksx3GcYU1TKBAAM7seuL7ecjiO4zgBmQ29nOOSlgBPlXn6usCLFRSnFjSbzM0mL7jMtaLZZG42eaGwzJuYWWon8pBUIINB0hwz66i3HKXQbDI3m7zgMteKZpO52eSFysrcLE50x3Ecp8FwBeI4juOUhSuQgVxUbwHKoNlkbjZ5wWWuFc0mc7PJCxWU2X0gjuM4Tln4DMRxHMcpC1cgjuM4Tlm4AolIOkDSQkmLJE2ttzxJJD0p6QFJ8yXNiW3jJN0k6dH4d2xsl6Qfx89xv6SdaiTjxZJekPRgoq1kGSUdE49/VNIxdZD5bEmd8V7Pl3RQ4r0zoswLJe2faK/Jd0fSRpJulfSQpAWSvhTbG/Y+F5C5ke/zGpLulnRflPkbsX0zSXfF/q+KaZWQNDLuL4rvb1rss9RI3kskPZG4x5Nie+W+F2Y27F+E9CiPAZsDqwP3ARPrLVdCvieBdbPavgdMjdtTge/G7YOAvwECdgPuqpGM7wN2Ah4sV0ZgHPB4/Ds2bo+tscxnA1/OcezE+L0YCWwWvy8ttfzuABOAneL2WsC/o1wNe58LyNzI91nAmnG7Fbgr3r+rgaNi+4XAf8ftzwMXxu2jgKsKfZYaynsJcFiO4yv2vfAZSKC3YJWZvQVkClY1MocCl8btS4HJifbLLHAnMEbShGoLY2Z/B14epIz7AzeZ2ctm9gpwE3BAjWXOx6HAlWb2ppk9ASwifG9q9t0xs+fM7N64/RrwMKFWTsPe5wIy56MR7rOZ2bK42xpfBuwN/DG2Z9/nzP3/I7CPJBX4LLWSNx8V+164AgnkKljVSNWkDLhR0lxJx8e29czsubj9H2C9uN1In6VUGRtF9pPj1P7ijDmIBpM5mkl2JDxtNsV9zpIZGvg+S2qRNB94gTCQPgZ0mdmKHP33yhbfXwq8rZYyZ8trZpl7/O14j8+TNDJb3iy5SpbXFUhz8B4z24lQE/4kSe9Lvmlh/tnQ8djNIGPk58DbgUnAc8AP6ivOQCStCVwDnGJmrybfa9T7nEPmhr7PZrbSzCYRag/tAmxTZ5EKki2vpO2AMwhyv4tgljq90v26AgkULVhVT8ysM/59AfgT4Qv9fMY0Ff++EA9vpM9Sqox1l93Mno8/xlXAL+kzOTSEzJJaCQPx783s2tjc0Pc5l8yNfp8zmFkXcCuwO8HUk8lgnuy/V7b4/jrAS/WQOSHvAdF8aGb2JvAbqnCPXYEEGrZglaTRktbKbAP7AQ8S5MtESRwD/DluzwA+FSMtdgOWJswbtaZUGWcC+0kaG00a+8W2mpHlL/ow4V5nZD4qRtxsBmwJ3E0NvzvRrv5r4GEz+2HirYa9z/lkbvD7PF7SmLjdBuxL8N3cChwWD8u+z5n7fxgwK84E832WWsj7SOKhQgR/TfIeV+Z7Ua7nf6i9CJEJ/ybYOr9Wb3kScm1OiOS4D1iQkY1gY70FeBS4GRhnfREZP42f4wGgo0ZyXkEwRfQQbKefKUdG4NMEZ+Mi4Lg6yPzbKNP98Yc2IXH816LMC4EDa/3dAd5DME/dD8yPr4Ma+T4XkLmR7/MOwLwo24PAmbF9c4ICWAT8ARgZ29eI+4vi+5sX+yw1kndWvMcPAr+jL1KrYt8LT2XiOI7jlIWbsBzHcZyycAXiOI7jlIUrEMdxHKcsXIE4juM4ZeEKxHEcxykLVyDOsEPSZEkmqejqYkmnSBo1iL6OlfSTtO0FrvOkpHUH26/jVBJXIM5w5Gjgjvi3GKcAZSsQxxnKuAJxhhUxJ9N7CIsGj0q0t0j6vqQHY/K5L0j6IrABcKukW+NxyxLnHCbpkrh9iEItiHmSbpa0HmUg6eeS5ihR1yHBVxTqwtwtaYt4/HhJ10i6J772yHHNw+Pnuk/S38uRy3FysVrxQxxnSHEocIOZ/VvSS5J2NrO5wPHApsAkM1shaZyZvSzpf4C9zOzFIte9A9jNzEzSZ4GvAKeVId/XYr8twC2SdjCz++N7S81se0mfAn4EfBA4HzjPzO6QtDEh9cQ7sq55JrC/mXVmUl44TiVwBeIMN44mDLoQakocDcwFPkAoCrQCwMzS1gnJsCFwVcw/tDrwRJnyHaGQsn81QjGmiYQUFRBSr2T+nhe3PwBMDOmOAFg7zrKSzAYukXQ1cC2OUyFcgTjDBknjCEWBtpdkhCp3JmlKCZdJ5v5ZI7F9AfBDM5shaU9Cxb1S5dsM+DLwLjN7JZrHkn1Yju0RhJnPG1nX6jvQ7ERJuwIHA3PjrOulUuVznGzcB+IMJw4Dfmtmm5jZpma2EWGm8F5C0aATFNN1R2UD8BqhFGuG5yW9Q9IIQhbZDOvQl/q63BrjawOvA0ujD+XArPePTPz9V9y+EfhC5gDFutdJJL3dzO4yszOBJfRP2e04ZeMKxBlOHE2op5Lkmtj+K+Bp4H5J9wEfi+9fBNyQcaITao7/FfgnIZNvhrOBP0iaCxTzl2Q4VtIzmRehhsQ84BHgcoLpKclYSfcDXwJOjW1fBDqi4/8h4MQc/Zwbne8PRrnvSymf4xTEs/E6juM4ZeEzEMdxHKcsXIE4juM4ZeEKxHEcxykLVyCO4zhOWbgCcRzHccrCFYjjOI5TFq5AHMdxnLL4f3OOuIgVnbVkAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 39,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655980378232
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mlflow.end_run()"
      ],
      "outputs": [],
      "execution_count": 40,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655980380086
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## GradientBoostingRegressor"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import time \r\n",
        "\r\n",
        "run_name = f'sand_sklearn_GradientBoostingRegressor_run_{int(time.time())}' # 実行ごとにかぶらないようにしつつ好きな名前を指定\r\n",
        "run = mlflow.start_run(run_name=run_name)\r\n",
        "# enable auto logging\r\n",
        "mlflow.autolog()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "2022/06/23 10:32:57 INFO mlflow.tracking.fluent: Autologging successfully enabled for sklearn.\n2022/06/23 10:32:57 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.\n2022/06/23 10:32:57 INFO mlflow.pyspark.ml: No SparkSession detected. Autologging will log pyspark.ml models contained in the default allowlist. To specify a custom allowlist, initialize a SparkSession prior to calling mlflow.pyspark.ml.autolog() and specify the path to your allowlist file via the spark.mlflow.pysparkml.autolog.logModelAllowlistFile conf.\n2022/06/23 10:32:57 INFO mlflow.tracking.fluent: Autologging successfully enabled for pyspark.ml.\n"
        }
      ],
      "execution_count": 41,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655980383192
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\r\n",
        "from sklearn.ensemble import GradientBoostingRegressor\r\n",
        "# Fit a lasso model on the training set\r\n",
        "model = GradientBoostingRegressor().fit(X_train, y_train)\r\n",
        "print (model, \"\\n\")\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n                          init=None, learning_rate=0.1, loss='ls', max_depth=3,\n                          max_features=None, max_leaf_nodes=None,\n                          min_impurity_decrease=0.0, min_impurity_split=None,\n                          min_samples_leaf=1, min_samples_split=2,\n                          min_weight_fraction_leaf=0.0, n_estimators=100,\n                          n_iter_no_change=None, presort='deprecated',\n                          random_state=None, subsample=1.0, tol=0.0001,\n                          validation_fraction=0.1, verbose=0, warm_start=False) \n\nGradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n                          init=None, learning_rate=0.1, loss='ls', max_depth=3,\n                          max_features=None, max_leaf_nodes=None,\n                          min_impurity_decrease=0.0, min_impurity_split=None,\n                          min_samples_leaf=1, min_samples_split=2,\n                          min_weight_fraction_leaf=0.0, n_estimators=100,\n                          n_iter_no_change=None, presort='deprecated',\n                          random_state=None, subsample=1.0, tol=0.0001,\n                          validation_fraction=0.1, verbose=0, warm_start=False) \n\n"
        }
      ],
      "execution_count": 42,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655980386104
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Evaluate"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "# Evaluate the model using the test data\r\n",
        "predictions = model.predict(X_test)\r\n",
        "mse = mean_squared_error(y_test, predictions)\r\n",
        "print(\"MSE:\", mse)\r\n",
        "rmse = np.sqrt(mse)\r\n",
        "print(\"RMSE:\", rmse)\r\n",
        "r2 = r2_score(y_test, predictions)\r\n",
        "print(\"R2:\", r2)\r\n",
        "metric = {\r\n",
        "    \"MSE\": mse,\r\n",
        "    \"RMSE\":rmse,\r\n",
        "    \"R2\":r2\r\n",
        "}\r\n",
        "mlflow.log_metrics(metric)\r\n",
        "# Plot predicted vs actual\r\n",
        "plt.scatter(y_test, predictions)\r\n",
        "plt.xlabel('Actual Labels')\r\n",
        "plt.ylabel('Predicted Labels')\r\n",
        "plt.title('Daily Bike Share Predictions')\r\n",
        "# overlay the regression line\r\n",
        "z = np.polyfit(y_test, predictions, 1)\r\n",
        "p = np.poly1d(z)\r\n",
        "plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "mlflow.log_figure(fig,\"evaluate.png\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "MSE: 104095.05599363311\nRMSE: 322.63765433320566\nR2: 0.7959281761093804\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 43,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655980388154
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mlflow.end_run()"
      ],
      "outputs": [],
      "execution_count": 44,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655980389932
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}