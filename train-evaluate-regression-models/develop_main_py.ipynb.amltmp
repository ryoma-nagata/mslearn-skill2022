{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## リファクタリング"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Step 1 とりあえずまとめる"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "\r\n",
        "import pandas as pd\r\n",
        "file_path = './data/daily-bike-share.csv'\r\n",
        "bike_data = pd.read_csv(file_path)\r\n",
        "bike_data.head()\r\n",
        "\r\n",
        "# Dataprep\r\n",
        "# enable auto logging\r\n",
        "mlflow.autolog()\r\n",
        "# Separate features and labels\r\n",
        "X, y = bike_data[['season','mnth', 'holiday','weekday','workingday','weathersit','temp', 'atemp', 'hum', 'windspeed']].values, bike_data['rentals'].values\r\n",
        "print('Features:',X[:10], '\\nLabels:', y[:10], sep='\\n')\r\n",
        "\r\n",
        "\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        "\r\n",
        "# Split data 70%-30% into training set and test set\r\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\r\n",
        "\r\n",
        "print ('Training Set: %d rows\\nTest Set: %d rows' % (X_train.shape[0], X_test.shape[0]))\r\n",
        "\r\n",
        "# Train\r\n",
        "\r\n",
        "# Train the model\r\n",
        "from sklearn.linear_model import LinearRegression\r\n",
        "\r\n",
        "# Fit a linear regression model on the training set\r\n",
        "model = LinearRegression().fit(X_train, y_train)\r\n",
        "print (model)\r\n",
        "\r\n",
        "# Evaluate\r\n",
        "\r\n",
        "import numpy as np\r\n",
        "\r\n",
        "predictions = model.predict(X_test)\r\n",
        "np.set_printoptions(suppress=True)\r\n",
        "print('Predicted labels: ', np.round(predictions)[:10])\r\n",
        "print('Actual labels   : ' ,y_test[:10])\r\n",
        "\r\n",
        "\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "fig = plt.figure(figsize=(10,10))\r\n",
        "plt.scatter(y_test, predictions)\r\n",
        "plt.xlabel('Actual Labels')\r\n",
        "plt.ylabel('Predicted Labels')\r\n",
        "plt.title('Daily Bike Share Predictions')\r\n",
        "# overlay the regression line\r\n",
        "z = np.polyfit(y_test, predictions, 1)\r\n",
        "p = np.poly1d(z)\r\n",
        "plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "\r\n",
        "mlflow.log_figure(fig,\"evaluate.png\")\r\n",
        "\r\n",
        "from sklearn.metrics import mean_squared_error, r2_score\r\n",
        "\r\n",
        "mse = mean_squared_error(y_test, predictions)\r\n",
        "print(\"MSE:\", mse)\r\n",
        "\r\n",
        "rmse = np.sqrt(mse)\r\n",
        "print(\"RMSE:\", rmse)\r\n",
        "\r\n",
        "r2 = r2_score(y_test, predictions)\r\n",
        "print(\"R2:\", r2)\r\n",
        "\r\n",
        "metric = {\r\n",
        "    \"MSE\": mse,\r\n",
        "    \"RMSE\":rmse,\r\n",
        "    \"R2\":r2\r\n",
        "}\r\n",
        "mlflow.log_metrics(metric)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "gather": {
          "logged": 1655982899981
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Step2 機械的に関数にする"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "\r\n",
        "import pandas as pd\r\n",
        "file_path = './data/daily-bike-share.csv'\r\n",
        "bike_data = pd.read_csv(file_path)\r\n",
        "bike_data.head()\r\n",
        "\r\n",
        "\r\n",
        "# Dataprep\r\n",
        "\r\n",
        "def data_prep():\r\n",
        "    # enable auto logging\r\n",
        "    mlflow.autolog()\r\n",
        "    # Separate features and labels\r\n",
        "    X, y = bike_data[['season','mnth', 'holiday','weekday','workingday','weathersit','temp', 'atemp', 'hum', 'windspeed']].values, bike_data['rentals'].values\r\n",
        "    print('Features:',X[:10], '\\nLabels:', y[:10], sep='\\n')\r\n",
        "\r\n",
        "\r\n",
        "    from sklearn.model_selection import train_test_split\r\n",
        "\r\n",
        "    # Split data 70%-30% into training set and test set\r\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\r\n",
        "\r\n",
        "    print ('Training Set: %d rows\\nTest Set: %d rows' % (X_train.shape[0], X_test.shape[0]))\r\n",
        "\r\n",
        "# Train\r\n",
        "def train_mode():\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "    # Train the model\r\n",
        "    from sklearn.linear_model import LinearRegression\r\n",
        "\r\n",
        "    # Fit a linear regression model on the training set\r\n",
        "    model = LinearRegression().fit(X_train, y_train)\r\n",
        "    print (model)\r\n",
        "\r\n",
        "# Evaluate\r\n",
        "def evaluate_model():\r\n",
        "\r\n",
        "    import numpy as np\r\n",
        "\r\n",
        "    predictions = model.predict(X_test)\r\n",
        "    np.set_printoptions(suppress=True)\r\n",
        "    print('Predicted labels: ', np.round(predictions)[:10])\r\n",
        "    print('Actual labels   : ' ,y_test[:10])\r\n",
        "\r\n",
        "\r\n",
        "    import matplotlib.pyplot as plt\r\n",
        "    fig = plt.figure(figsize=(10,10))\r\n",
        "    plt.scatter(y_test, predictions)\r\n",
        "    plt.xlabel('Actual Labels')\r\n",
        "    plt.ylabel('Predicted Labels')\r\n",
        "    plt.title('Daily Bike Share Predictions')\r\n",
        "    # overlay the regression line\r\n",
        "    z = np.polyfit(y_test, predictions, 1)\r\n",
        "    p = np.poly1d(z)\r\n",
        "    plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "\r\n",
        "    mlflow.log_figure(fig,\"evaluate.png\")\r\n",
        "\r\n",
        "    from sklearn.metrics import mean_squared_error, r2_score\r\n",
        "\r\n",
        "    mse = mean_squared_error(y_test, predictions)\r\n",
        "    print(\"MSE:\", mse)\r\n",
        "\r\n",
        "    rmse = np.sqrt(mse)\r\n",
        "    print(\"RMSE:\", rmse)\r\n",
        "\r\n",
        "    r2 = r2_score(y_test, predictions)\r\n",
        "    print(\"R2:\", r2)\r\n",
        "\r\n",
        "    metric = {\r\n",
        "        \"MSE\": mse,\r\n",
        "        \"RMSE\":rmse,\r\n",
        "        \"R2\":r2\r\n",
        "    }\r\n",
        "    mlflow.log_metrics(metric)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Step 3 パラメータを整理する\r\n",
        "- 関数内で定義されていないものを引数にする"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "\r\n",
        "import pandas as pd\r\n",
        "file_path = './data/daily-bike-share.csv'\r\n",
        "bike_data = pd.read_csv(file_path)\r\n",
        "bike_data.head()\r\n",
        "\r\n",
        "\r\n",
        "# Dataprep\r\n",
        "def data_prep(bike_data):\r\n",
        "    # enable auto logging\r\n",
        "    mlflow.autolog()\r\n",
        "    # Separate features and labels\r\n",
        "    X, y = bike_data[['season','mnth', 'holiday','weekday','workingday','weathersit','temp', 'atemp', 'hum', 'windspeed']].values, bike_data['rentals'].values\r\n",
        "    print('Features:',X[:10], '\\nLabels:', y[:10], sep='\\n')\r\n",
        "\r\n",
        "\r\n",
        "    from sklearn.model_selection import train_test_split\r\n",
        "\r\n",
        "    # Split data 70%-30% into training set and test set\r\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\r\n",
        "\r\n",
        "    print ('Training Set: %d rows\\nTest Set: %d rows' % (X_train.shape[0], X_test.shape[0]))\r\n",
        "\r\n",
        "    \r\n",
        "# Train\r\n",
        "def train_mode(X_train, y_train):\r\n",
        "\r\n",
        "    # Train the model\r\n",
        "    from sklearn.linear_model import LinearRegression\r\n",
        "\r\n",
        "    # Fit a linear regression model on the training set\r\n",
        "    model = LinearRegression().fit(X_train, y_train)\r\n",
        "    print (model)\r\n",
        "\r\n",
        "# Evaluate\r\n",
        "def evaluate_model(model,X_test,y_test):\r\n",
        "\r\n",
        "    import numpy as np\r\n",
        "\r\n",
        "    predictions = model.predict(X_test)\r\n",
        "    np.set_printoptions(suppress=True)\r\n",
        "    print('Predicted labels: ', np.round(predictions)[:10])\r\n",
        "    print('Actual labels   : ' ,y_test[:10])\r\n",
        "\r\n",
        "\r\n",
        "    import matplotlib.pyplot as plt\r\n",
        "    fig = plt.figure(figsize=(10,10))\r\n",
        "    plt.scatter(y_test, predictions)\r\n",
        "    plt.xlabel('Actual Labels')\r\n",
        "    plt.ylabel('Predicted Labels')\r\n",
        "    plt.title('Daily Bike Share Predictions')\r\n",
        "    # overlay the regression line\r\n",
        "    z = np.polyfit(y_test, predictions, 1)\r\n",
        "    p = np.poly1d(z)\r\n",
        "    plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "\r\n",
        "    mlflow.log_figure(fig,\"evaluate.png\")\r\n",
        "\r\n",
        "    from sklearn.metrics import mean_squared_error, r2_score\r\n",
        "\r\n",
        "    mse = mean_squared_error(y_test, predictions)\r\n",
        "    print(\"MSE:\", mse)\r\n",
        "\r\n",
        "    rmse = np.sqrt(mse)\r\n",
        "    print(\"RMSE:\", rmse)\r\n",
        "\r\n",
        "    r2 = r2_score(y_test, predictions)\r\n",
        "    print(\"R2:\", r2)\r\n",
        "\r\n",
        "    metric = {\r\n",
        "        \"MSE\": mse,\r\n",
        "        \"RMSE\":rmse,\r\n",
        "        \"R2\":r2\r\n",
        "    }\r\n",
        "    mlflow.log_metrics(metric)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Step 4  mainを作成し、整える。\r\n",
        "\r\n",
        "- mainと実行を組む\r\n",
        "- returnを実装する\r\n",
        "- import など整理する　※mlflow忘れないように\r\n",
        "- ここでデバッグ可能になる"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\r\n",
        "import pandas as pd\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import mlflow\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        "from sklearn.linear_model import LinearRegression\r\n",
        "from sklearn.metrics import mean_squared_error, r2_score\r\n",
        "\r\n",
        "def main():\r\n",
        "\r\n",
        "    # enable auto logging\r\n",
        "    mlflow.autolog()\r\n",
        "    \r\n",
        "    file_path = './data/daily-bike-share.csv'\r\n",
        "    bike_data = pd.read_csv(file_path)\r\n",
        "    bike_data.head()\r\n",
        "\r\n",
        "    X_train, X_test, y_train, y_test = data_prep(bike_data)\r\n",
        "\r\n",
        "    model = train_mode(X_train, y_train)\r\n",
        "\r\n",
        "    evaluate = evaluate_model(model,X_test,y_test)\r\n",
        "\r\n",
        "\r\n",
        "# Dataprep\r\n",
        "def data_prep(bike_data):\r\n",
        "\r\n",
        "    # Separate features and labels\r\n",
        "    X, y = bike_data[['season','mnth', 'holiday','weekday','workingday','weathersit','temp', 'atemp', 'hum', 'windspeed']].values, bike_data['rentals'].values\r\n",
        "    print('Features:',X[:10], '\\nLabels:', y[:10], sep='\\n')\r\n",
        "\r\n",
        "    # Split data 70%-30% into training set and test set\r\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\r\n",
        "    print ('Training Set: %d rows\\nTest Set: %d rows' % (X_train.shape[0], X_test.shape[0]))\r\n",
        "\r\n",
        "    return X_train, X_test, y_train, y_test\r\n",
        "    \r\n",
        "# Train\r\n",
        "def train_mode(X_train, y_train):\r\n",
        "\r\n",
        "    # Train the model\r\n",
        "    # Fit a linear regression model on the training set\r\n",
        "    model = LinearRegression().fit(X_train, y_train)\r\n",
        "    print (model)\r\n",
        "\r\n",
        "    return model\r\n",
        "\r\n",
        "# Evaluate\r\n",
        "def evaluate_model(model,X_test,y_test):\r\n",
        "\r\n",
        "    predictions = model.predict(X_test)\r\n",
        "    np.set_printoptions(suppress=True)\r\n",
        "    print('Predicted labels: ', np.round(predictions)[:10])\r\n",
        "    print('Actual labels   : ' ,y_test[:10])\r\n",
        "    \r\n",
        "    fig = plt.figure(figsize=(10,10))\r\n",
        "    plt.scatter(y_test, predictions)\r\n",
        "    plt.xlabel('Actual Labels')\r\n",
        "    plt.ylabel('Predicted Labels')\r\n",
        "    plt.title('Daily Bike Share Predictions')\r\n",
        "    # overlay the regression line\r\n",
        "    z = np.polyfit(y_test, predictions, 1)\r\n",
        "    p = np.poly1d(z)\r\n",
        "    plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "\r\n",
        "    mlflow.log_figure(fig,\"evaluate.png\")\r\n",
        "\r\n",
        "    mse = mean_squared_error(y_test, predictions)\r\n",
        "    print(\"MSE:\", mse)\r\n",
        "\r\n",
        "    rmse = np.sqrt(mse)\r\n",
        "    print(\"RMSE:\", rmse)\r\n",
        "\r\n",
        "    r2 = r2_score(y_test, predictions)\r\n",
        "    print(\"R2:\", r2)\r\n",
        "\r\n",
        "    metric = {\r\n",
        "        \"MSE\": mse,\r\n",
        "        \"RMSE\":rmse,\r\n",
        "        \"R2\":r2\r\n",
        "    }\r\n",
        "    mlflow.log_metrics(metric)\r\n",
        "\r\n",
        "    return metric\r\n",
        "    \r\n",
        "if __name__ == \"__main__\":\r\n",
        "    # run main function\r\n",
        "    main()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Features:\n[[1.        1.        0.        6.        0.        2.        0.344167\n  0.363625  0.805833  0.160446 ]\n [1.        1.        0.        0.        0.        2.        0.363478\n  0.353739  0.696087  0.248539 ]\n [1.        1.        0.        1.        1.        1.        0.196364\n  0.189405  0.437273  0.248309 ]\n [1.        1.        0.        2.        1.        1.        0.2\n  0.212122  0.590435  0.160296 ]\n [1.        1.        0.        3.        1.        1.        0.226957\n  0.22927   0.436957  0.1869   ]\n [1.        1.        0.        4.        1.        1.        0.204348\n  0.233209  0.518261  0.0895652]\n [1.        1.        0.        5.        1.        2.        0.196522\n  0.208839  0.498696  0.168726 ]\n [1.        1.        0.        6.        0.        2.        0.165\n  0.162254  0.535833  0.266804 ]\n [1.        1.        0.        0.        0.        1.        0.138333\n  0.116175  0.434167  0.36195  ]\n [1.        1.        0.        1.        1.        1.        0.150833\n  0.150888  0.482917  0.223267 ]]\n\nLabels:\n[331 131 120 108  82  88 148  68  54  41]\nTraining Set: 511 rows\nTest Set: 220 rows\nLinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)\nPredicted labels:  [1896. 1184. 1007.  -28.  314.  385.  475.  590. 1476.  -22.]\nActual labels   :  [2418  754  222   47  244  145  240  555 3252   38]\nMSE: 201972.55947035592\nRMSE: 449.4135728595165\nR2: 0.6040454736919191\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 720x720 with 1 Axes>",
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 2,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655983860258
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mlflow.end_run()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "<function mlflow.tracking.fluent.end_run(status: str = 'FINISHED') -> None>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 3,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655983901548
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Step 5 コードにargを作成し、main.pyを作成する"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\r\n",
        "\r\n",
        "src_dir = \"./src\"\r\n",
        "os.makedirs(src_dir, exist_ok=True)"
      ],
      "outputs": [],
      "execution_count": 4,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1655984244485
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile ./src/main.py\r\n",
        "\r\n",
        "import numpy as np\r\n",
        "import pandas as pd\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import mlflow\r\n",
        "import argparse # 追加\r\n",
        "\r\n",
        "from sklearn.model_selection import train_test_split\r\n",
        "from sklearn.linear_model import LinearRegression\r\n",
        "from sklearn.metrics import mean_squared_error, r2_score\r\n",
        "\r\n",
        "def main(args):\r\n",
        "    \r\n",
        "    # enable auto logging\r\n",
        "    mlflow.autolog()\r\n",
        "\r\n",
        "    # file_path = './data/daily-bike-share.csv'\r\n",
        "    bike_data = pd.read_csv(args.input_data)\r\n",
        "    bike_data.head()\r\n",
        "\r\n",
        "    X_train, X_test, y_train, y_test = data_prep(bike_data)\r\n",
        "\r\n",
        "    model = train_mode(X_train, y_train)\r\n",
        "\r\n",
        "    evaluate = evaluate_model(model,X_test,y_test)\r\n",
        "\r\n",
        "\r\n",
        "# Dataprep\r\n",
        "def data_prep(bike_data):\r\n",
        "\r\n",
        "    # Separate features and labels\r\n",
        "    X, y = bike_data[['season','mnth', 'holiday','weekday','workingday','weathersit','temp', 'atemp', 'hum', 'windspeed']].values, bike_data['rentals'].values\r\n",
        "    print('Features:',X[:10], '\\nLabels:', y[:10], sep='\\n')\r\n",
        "\r\n",
        "    # Split data 70%-30% into training set and test set\r\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\r\n",
        "    print ('Training Set: %d rows\\nTest Set: %d rows' % (X_train.shape[0], X_test.shape[0]))\r\n",
        "\r\n",
        "    return X_train, X_test, y_train, y_test\r\n",
        "    \r\n",
        "# Train\r\n",
        "def train_mode(X_train, y_train):\r\n",
        "\r\n",
        "    # Train the model\r\n",
        "    # Fit a linear regression model on the training set\r\n",
        "    model = LinearRegression().fit(X_train, y_train)\r\n",
        "    print (model)\r\n",
        "\r\n",
        "    return model\r\n",
        "\r\n",
        "# Evaluate\r\n",
        "def evaluate_model(model,X_test,y_test):\r\n",
        "\r\n",
        "    predictions = model.predict(X_test)\r\n",
        "    np.set_printoptions(suppress=True)\r\n",
        "    print('Predicted labels: ', np.round(predictions)[:10])\r\n",
        "    print('Actual labels   : ' ,y_test[:10])\r\n",
        "    \r\n",
        "    fig = plt.figure(figsize=(10,10))\r\n",
        "    plt.scatter(y_test, predictions)\r\n",
        "    plt.xlabel('Actual Labels')\r\n",
        "    plt.ylabel('Predicted Labels')\r\n",
        "    plt.title('Daily Bike Share Predictions')\r\n",
        "    # overlay the regression line\r\n",
        "    z = np.polyfit(y_test, predictions, 1)\r\n",
        "    p = np.poly1d(z)\r\n",
        "    plt.plot(y_test,p(y_test), color='magenta')\r\n",
        "\r\n",
        "    mlflow.log_figure(fig,\"evaluate.png\")\r\n",
        "\r\n",
        "    mse = mean_squared_error(y_test, predictions)\r\n",
        "    print(\"MSE:\", mse)\r\n",
        "\r\n",
        "    rmse = np.sqrt(mse)\r\n",
        "    print(\"RMSE:\", rmse)\r\n",
        "\r\n",
        "    r2 = r2_score(y_test, predictions)\r\n",
        "    print(\"R2:\", r2)\r\n",
        "\r\n",
        "    metric = {\r\n",
        "        \"MSE\": mse,\r\n",
        "        \"RMSE\":rmse,\r\n",
        "        \"R2\":r2\r\n",
        "    }\r\n",
        "    mlflow.log_metrics(metric)\r\n",
        "\r\n",
        "    return metric\r\n",
        "    \r\n",
        "def parse_args():\r\n",
        "   \r\n",
        "    # setup arg parser\r\n",
        "    parser = argparse.ArgumentParser()\r\n",
        "    parser.add_argument(\"--input_data\", type=str)\r\n",
        "\r\n",
        "    args = parser.parse_args()\r\n",
        "\r\n",
        "    # return args\r\n",
        "    return args\r\n",
        "\r\n",
        "\r\n",
        "# run script\r\n",
        "if __name__ == \"__main__\":\r\n",
        "    # parse args\r\n",
        "    args = parse_args()\r\n",
        "\r\n",
        "    # run main function\r\n",
        "    main(args)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Overwriting ./src/main.py\n"
        }
      ],
      "execution_count": 7,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}